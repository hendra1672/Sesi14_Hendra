import type { HistoryDataPoint, SeverityLevel, Statistic, TestResult, TestStatus } from "@allurereport/core-api";
import type { AllureStore, PluginContext } from "@allurereport/plugin-api";
import type { PieArcDatum } from "d3-shape";
import type { AwesomeOptions } from "./model.js";
import type { AwesomeDataWriter } from "./writer.js";
export type BasePieSlice = Pick<PieSlice, "status" | "count">;
export declare const d3Arc: import("d3-shape").Arc<any, PieArcDatum<BasePieSlice>>;
export declare const d3Pie: import("d3-shape").Pie<any, BasePieSlice>;
export declare const getPercentage: (value: number, total: number) => number;
export declare enum ChartType {
    Trend = "trend",
    Pie = "pie"
}
export declare enum ChartData {
    Status = "status",
    Severity = "severity"
}
export type ChartMode = "raw" | "percent";
export type ChartId = string;
export type ExecutionIdFn = (executionOrder: number) => string;
export type ExecutionNameFn = (executionOrder: number) => string;
export type TrendMetadataFnOverrides = {
    executionIdAccessor?: ExecutionIdFn;
    executionNameAccessor?: ExecutionNameFn;
};
export type TrendChartOptions = {
    type: ChartType.Trend;
    dataType: ChartData;
    mode?: ChartMode;
    title?: string;
    limit?: number;
    metadata?: TrendMetadataFnOverrides;
};
export type TrendPointId = string;
export type TrendSliceId = string;
export type BaseMetadata = Record<string, unknown>;
export interface BaseTrendSliceMetadata extends Record<string, unknown> {
    executionId: string;
    executionName: string;
}
export type TrendSliceMetadata<Metadata extends BaseMetadata> = BaseTrendSliceMetadata & Metadata;
export type TrendPoint = {
    x: string;
    y: number;
};
export type TrendSlice<Metadata extends BaseMetadata> = {
    min: number;
    max: number;
    metadata: TrendSliceMetadata<Metadata>;
};
export type GenericTrendChartData<Metadata extends BaseMetadata, SeriesType extends string> = {
    type: ChartType.Trend;
    dataType: ChartData;
    title?: string;
    points: Record<TrendPointId, TrendPoint>;
    slices: Record<TrendSliceId, TrendSlice<Metadata>>;
    series: Record<SeriesType, TrendPointId[]>;
    min: number;
    max: number;
};
export interface StatusMetadata extends BaseTrendSliceMetadata {
}
export type StatusTrendSliceMetadata = TrendSliceMetadata<StatusMetadata>;
export type StatusTrendSlice = TrendSlice<StatusTrendSliceMetadata>;
export type StatusTrendChartData = GenericTrendChartData<StatusTrendSliceMetadata, TestStatus>;
export interface SeverityMetadata extends BaseTrendSliceMetadata {
}
export type SeverityTrendSliceMetadata = TrendSliceMetadata<SeverityMetadata>;
export type SeverityTrendSlice = TrendSlice<SeverityTrendSliceMetadata>;
export type SeverityTrendChartData = GenericTrendChartData<SeverityTrendSliceMetadata, SeverityLevel>;
export type TrendChartData = StatusTrendChartData | SeverityTrendChartData;
export type PieChartOptions = {
    type: ChartType.Pie;
    title?: string;
};
export type PieSlice = {
    status: TestStatus;
    count: number;
    d: string | null;
};
export type PieChartData = {
    type: ChartType.Pie;
    title?: string;
    slices: PieSlice[];
    percentage: number;
};
export type GeneratedChartData = TrendChartData | PieChartData;
export type GeneratedChartsData = Record<ChartId, GeneratedChartData>;
export type ChartOptions = TrendChartOptions | PieChartOptions;
export type DashboardOptions = {
    reportName?: string;
    singleFile?: boolean;
    logo?: string;
    theme?: "light" | "dark";
    reportLanguage?: "en" | "ru";
    layout?: ChartOptions[];
    filter?: (testResult: TestResult) => boolean;
};
export type TrendDataType = TestStatus | SeverityLevel;
export type TrendCalculationResult<T extends TrendDataType> = {
    points: Record<TrendPointId, TrendPoint>;
    series: Record<T, TrendPointId[]>;
};
export declare const createEmptyStats: <T extends TrendDataType>(items: readonly T[]) => Record<T, number>;
export declare const createEmptySeries: <T extends TrendDataType>(items: readonly T[]) => Record<T, string[]>;
export declare const normalizeStatistic: <T extends TrendDataType>(statistic: Partial<Record<T, number>>, itemType: readonly T[]) => Record<T, number>;
export declare const mergeTrendDataGeneric: <M extends BaseTrendSliceMetadata, T extends TrendDataType>(trendData: GenericTrendChartData<M, T>, trendDataPart: GenericTrendChartData<M, T>, itemType: readonly T[]) => GenericTrendChartData<M, T>;
export declare const getTrendDataGeneric: <M extends BaseTrendSliceMetadata, T extends TrendDataType>(stats: Record<T, number>, reportName: string, executionOrder: number, itemType: readonly T[], chartOptions: TrendChartOptions) => GenericTrendChartData<M, T>;
export declare const generateCharts: (options: AwesomeOptions, store: AllureStore, context: PluginContext) => Promise<GeneratedChartsData | undefined>;
export declare const generateTrendChart: (options: TrendChartOptions, stores: {
    historyDataPoints: HistoryDataPoint[];
    statistic: Statistic;
    testResults: TestResult[];
}, context: PluginContext) => TrendChartData | undefined;
export declare const generateAllCharts: (writer: AwesomeDataWriter, store: AllureStore, options: AwesomeOptions, context: PluginContext) => Promise<void>;
