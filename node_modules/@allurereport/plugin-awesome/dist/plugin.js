var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _AwesomePlugin_writer, _AwesomePlugin_generate;
import { getWorstStatus } from "@allurereport/core-api";
import { preciseTreeLabels } from "@allurereport/plugin-api";
import { join } from "node:path";
import { generateAllCharts } from "./charts.js";
import { generateAttachmentsFiles, generateEnvironmentJson, generateEnvirontmentsList, generateHistoryDataPoints, generateNav, generatePieChart, generateStaticFiles, generateStatistic, generateTestCases, generateTestEnvGroups, generateTestResults, generateTree, generateVariables, } from "./generators.js";
import { InMemoryReportDataWriter, ReportFileDataWriter } from "./writer.js";
export class AwesomePlugin {
    constructor(options = {}) {
        this.options = options;
        _AwesomePlugin_writer.set(this, void 0);
        _AwesomePlugin_generate.set(this, async (context, store) => {
            const { singleFile, groupBy = [] } = this.options ?? {};
            const environmentItems = await store.metadataByKey("allure_environment");
            const reportEnvironments = await store.allEnvironments();
            const attachments = await store.allAttachments();
            await generateStatistic(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), store, this.options.filter);
            await generatePieChart(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), store, this.options.filter);
            await generateAllCharts(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), store, this.options, context);
            const convertedTrs = await generateTestResults(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), store, this.options.filter);
            const treeLabels = preciseTreeLabels(!groupBy.length ? ["parentSuite", "suite", "subSuite"] : groupBy, convertedTrs, ({ labels }) => labels.map(({ name }) => name));
            await generateHistoryDataPoints(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), store);
            await generateTestCases(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), convertedTrs);
            await generateTree(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), "tree.json", treeLabels, convertedTrs);
            await generateNav(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), convertedTrs, "nav.json");
            await generateTestEnvGroups(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), store);
            for (const reportEnvironment of reportEnvironments) {
                const envTrs = await store.testResultsByEnvironment(reportEnvironment);
                const envTrsIds = envTrs.map(({ id }) => id);
                const envConvertedTrs = convertedTrs.filter(({ id }) => envTrsIds.includes(id));
                await generateTree(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), join(reportEnvironment, "tree.json"), treeLabels, envConvertedTrs);
                await generateNav(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), envConvertedTrs, join(reportEnvironment, "nav.json"));
            }
            await generateEnvirontmentsList(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), store);
            await generateVariables(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), store);
            if (environmentItems?.length) {
                await generateEnvironmentJson(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), environmentItems);
            }
            if (attachments?.length) {
                await generateAttachmentsFiles(__classPrivateFieldGet(this, _AwesomePlugin_writer, "f"), attachments, (id) => store.attachmentContentById(id));
            }
            const reportDataFiles = singleFile ? __classPrivateFieldGet(this, _AwesomePlugin_writer, "f").reportFiles() : [];
            await generateStaticFiles({
                ...this.options,
                allureVersion: context.allureVersion,
                reportFiles: context.reportFiles,
                reportDataFiles,
                reportUuid: context.reportUuid,
                reportName: context.reportName,
            });
        });
        this.start = async (context) => {
            const { singleFile } = this.options;
            if (singleFile) {
                __classPrivateFieldSet(this, _AwesomePlugin_writer, new InMemoryReportDataWriter(), "f");
                return;
            }
            __classPrivateFieldSet(this, _AwesomePlugin_writer, new ReportFileDataWriter(context.reportFiles), "f");
            await Promise.resolve();
        };
        this.update = async (context, store) => {
            if (!__classPrivateFieldGet(this, _AwesomePlugin_writer, "f")) {
                throw new Error("call start first");
            }
            await __classPrivateFieldGet(this, _AwesomePlugin_generate, "f").call(this, context, store);
        };
        this.done = async (context, store) => {
            if (!__classPrivateFieldGet(this, _AwesomePlugin_writer, "f")) {
                throw new Error("call start first");
            }
            await __classPrivateFieldGet(this, _AwesomePlugin_generate, "f").call(this, context, store);
        };
    }
    async info(context, store) {
        const allTrs = (await store.allTestResults()).filter((tr) => this.options.filter ? this.options.filter(tr) : true);
        const duration = allTrs.reduce((acc, { duration: trDuration = 0 }) => acc + trDuration, 0);
        const worstStatus = getWorstStatus(allTrs.map(({ status }) => status));
        const createdAt = allTrs.reduce((acc, { stop }) => Math.max(acc, stop || 0), 0);
        return {
            name: this.options.reportName || context.reportName,
            stats: await store.testsStatistic(this.options.filter),
            status: worstStatus ?? "passed",
            duration,
            createdAt,
            plugin: "Awesome",
        };
    }
}
_AwesomePlugin_writer = new WeakMap(), _AwesomePlugin_generate = new WeakMap();
